data_dir = '/content/drive/MyDrive/predic_price'
prd = ['date', '배추', '무', '마늘', '양파', '대파', '시금치', '깻잎']
col = '무'
is_cuda = False

BATCH_SIZE = 6
DEVICE = torch.device('cuda' if torch.cuda.is_available() and is_cuda else 'cpu')

# 모델 초기화
input_size = 2
model = NeuralNetwork(input_size).to(DEVICE)

criterion = nn.MSELoss()
optimizer = optim.SGD(model.parameters(), lr=0.01)
num_epochs = 100

train_loader = build_dataloader(data_dir, prd, 'train', col)
test_loader = build_dataloader(data_dir, prd, 'test', col)

train_losses = []

for epoch in range(num_epochs):
    train_loss = train_one_epoch(train_loader, model, optimizer, criterion, DEVICE)
    train_losses.append(train_loss)

    print(f"Epoch {epoch+1}/{num_epochs} - Train loss: {train_loss:.4f}")

# Evaluate the model
model.eval()
with torch.no_grad():
    test_loss = 0.0
    for inputs, targets in test_loader:
        inputs, targets = inputs.to(DEVICE), targets.to(DEVICE)
        outputs = model(inputs)
        loss = criterion(outputs, targets)
        test_loss += loss.item() * inputs.size(0)

    test_loss /= len(test_loader.dataset)
    print(f'Test Loss: {test_loss:.4f}')
